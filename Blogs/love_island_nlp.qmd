---
title: "Love Island NLP"
subtitle: "Using Reddit to track sentiment of Love Island Contestants"
author: "Tucker Trost"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


## Background

Over the past few weeks, I’ve been diving headfirst into the world of Natural Language Processing (NLP), and honestly it's been kind of mind-blowing. Learning the tools and exploring the endless use cases has completely opened my eyes to just how powerful NLP can be. So much of the world’s data is text, and being able to actually make sense of it and pull meaningful insights? Total game changer.

One area I’ve been particularly obsessed with is sentiment analysis, figuring out whether a piece of text sounds positive, neutral, or negative. I started off with the basics, experimenting with built-in datasets from the NLTK library and playing around with the VADER lexicon. But the real magic started happening when I got my hands on pretrained models from Hugging Face, models that are trained on specific types of text like tweets.

Now here’s where things took a turn. My wife recently got into Love Island USA, a show where a bunch of attractive 20-somethings date each other in a villa in Fiji. I originally watched to be a supportive husband... but I’ll admit it, I got hooked. The drama, the storylines, the unexpected twists, I was all in. And somewhere along the way, after watching my opinion of a contestant totally shift over time, it hit me: what if I could track public sentiment like that?

That spark turned into this project—analyzing Reddit discussions of Love Island USA to track how the internet feels about each contestant as the season unfolds.

## Grabbing Data

Grabbing data for this was surprisingly simple. There is a strong community following for the show under the subreddit r/loveislandusa. Within this subreddit, there are post-episode discussion threads for each episode. Each episode tends to get around 8k-15k comments, which is plenty for me to run my analysis. 

Reddit also makes it very easy to use their data. After signing up for an api key, a simple call to grab all the relevant comments from each episodes discussion thread got me all the data I needed to get going. 


```{python}
import pandas as pd

li_full = pd.read_csv('li_full.csv')

li_full[['comment','score','created_utc','episode_title']].head()
```


## Sentiment Analysis

Now that I had my data, it was time to do some named-entity recognition, to pull the information I neeed. For example, if a comment talkes negatively about the contestant Huda but positivly about Jeramiah, I need to make sure I get the proper sentiment scores for each contestant within that single comment. 

I was also able to use a pretrained model from hugging face that is trained specifically on the casual nature of discussion boards like twitter and reddit. This will work perfectly for our analysis


```{python}
import re
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import numpy as np

# Initialize islander list
islanders = ['Chelley','Olandria','Huda','Ace','Nic','Taylor','Jeremiah','Austin','Charlie','Cierra','Hannah','Amaya','Pepe','Jalen','Iris','Yulissa','Belle-A']

# Call Hugginface Model
tokenizer = AutoTokenizer.from_pretrained("cardiffnlp/twitter-roberta-base-sentiment")
model = AutoModelForSequenceClassification.from_pretrained("cardiffnlp/twitter-roberta-base-sentiment")

```


```{python}
import nltk
from nltk.tokenize import sent_tokenize
nltk.download('punkt')

# Create Sentiment Function
# def targeted_sentiment(comment, islanders):
#     islander_sentiment = {}
#     for sentence in sent_tokenize(comment):
#         for name in islanders:
#             if re.search(rf'\b{name}\b', sentence, re.IGNORECASE):
#                 result = get_sentiment_score(sentence)
#                 if name not in islander_sentiment:
#                     islander_sentiment[name] = []
#                 islander_sentiment[name].append(result['compound'])
#     return {name: np.mean(scores) for name, scores in islander_sentiment.items()}


# Apply to data
# loveisland['islander_sentiment'] = loveisland['comment'].swifter.apply(lambda x: targeted_sentiment(x,islanders))
# loveisland.head()
```


```{python}
# import ast

# # Step 1: Convert stringified dicts to real dicts
# loveisland2['islander_sentiment'] = loveisland2['islander_sentiment'].apply(
#     lambda x: ast.literal_eval(x) if isinstance(x, str) else x
# )

# # Step 2: Filter out nulls and make sure only dicts are kept
# loveisland2_clean = loveisland2[
#     loveisland2['islander_sentiment'].apply(lambda x: isinstance(x, dict) and len(x) > 0)
# ].copy()

# # Step 3: Convert dict into list of tuples and explode
# loveisland2_clean['islander_sentiment_items'] = loveisland2_clean['islander_sentiment'].apply(lambda d: list(d.items()))
# loveisland2_exploded = loveisland2_clean.explode('islander_sentiment_items')

# # Step 4: Split tuple into two new columns
# loveisland2_exploded[['islander', 'sentiment']] = pd.DataFrame(
#     loveisland2_exploded['islander_sentiment_items'].tolist(), index=loveisland2_exploded.index
# )

# # Optional cleanup
# loveisland2_exploded = loveisland2_exploded.drop(columns=['islander_sentiment_items'])

# loveisland2_exploded.head()
```

After running the model on our comments and pulling in some episode airdate data, we wind up with the following dataset.

```{python}
li_full.head()
```

## Try the Sentiment Dashboard

<iframe src="https://loveislandusa-sentiment.onrender.com" width="100%" height="600" style="border:none;"></iframe>
